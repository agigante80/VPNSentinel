---
name: VPN Sentinel CI/CD

permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  syntax-check:
    name: Syntax & Style Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
      - name: Check Python syntax
        run: |
          python -m py_compile vpn-sentinel-server/vpn-sentinel-server.py
          echo "‚úÖ Python syntax check passed"
      - name: Check shell script syntax
        run: |
          bash -n vpn-sentinel-client/vpn-sentinel-client.sh
          echo "‚úÖ Shell script syntax check passed"
      - name: Python code style check
        run: |
          flake8 vpn-sentinel-server/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 vpn-sentinel-server/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
      - name: Check Docker Compose files
        run: |
          docker-compose -f compose.yaml config > /dev/null
          echo "‚úÖ Main compose.yaml syntax OK"
          for file in deployments/*/compose.yaml; do
            if [ -f "$file" ]; then
              docker-compose -f "$file" config > /dev/null
              echo "‚úÖ $(basename $(dirname $file))/compose.yaml syntax OK"
            fi
          done

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: syntax-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then
            pip install -r tests/requirements.txt
          fi
      - name: Run unit tests
        run: |
          cd tests
          python -m pytest unit/ -v --tb=short --junitxml=unit-test-results.xml
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: tests/unit-test-results.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: vpn_sentinel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
      - name: Create test environment file
        run: |
          cp tests/.env.test .env
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
      - name: Remove old Docker containers
        run: docker-compose -f tests/docker-compose.test.yaml down -v
      - name: Remove dangling volumes
        run: docker volume prune -f
      - name: Build fresh containers
        run: docker-compose -f tests/docker-compose.test.yaml build --no-cache
      - name: Build and start test environment
        run: |
          docker-compose -f tests/docker-compose.test.yaml up -d --build
          timeout 60s bash -c 'while ! curl -s http://localhost:15554/test/v1/health > /dev/null; do sleep 2; done'
          echo "‚úÖ Test server is ready"
      - name: Run integration tests
        run: |
          cd tests
          export VPN_SENTINEL_SERVER_API_BASE_URL=http://localhost:15554
          python -m pytest integration/ -v --
      - name: Get server logs on failure
        if: failure()
        run: |
          echo "=== Server Logs ==="
          docker-compose -f tests/docker-compose.test.yaml logs vpn-sentinel-server-test
          echo "=== Client Logs ==="
          docker-compose -f tests/docker-compose.test.yaml logs vpn-sentinel-client-test
      - name: Stop test environment
        if: always()
        run: |
          docker-compose -f tests/docker-compose.test.yaml down -v

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install coverage codecov
      - name: Run tests with coverage
        run: |
          cd tests
          coverage run --source="../vpn-sentinel-server" -m pytest unit/ --quiet
          coverage xml -o coverage.xml
          coverage report --show-missing
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: tests/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: syntax-check
    strategy:
      matrix:
        component: [vpn-sentinel-server, vpn-sentinel-client]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component }}/
          file: ${{ matrix.component }}/Dockerfile
          push: false
          tags: vpn-sentinel-${{ matrix.component }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build VPN Sentinel server image
        if: matrix.component == 'vpn-sentinel-server'
        run: |
          docker build -t vpn-sentinel-vpn-sentinel-server:test .
        working-directory: vpn-sentinel-server
      - name: Test Docker image
        run: |
          if [ "${{ matrix.component }}" = "vpn-sentinel-server" ]; then
            docker run --rm -d --name test-container \
              -e VPN_SENTINEL_API_KEY=test-key \
              -e VPN_SENTINEL_SERVER_API_PORT=5554 \
              -e VPN_SENTINEL_SERVER_DASHBOARD_PORT=5553 \
              -e VPN_SENTINEL_SERVER_DASHBOARD_ENABLED=false \
              -e TELEGRAM_BOT_TOKEN=test:token \
              -e TELEGRAM_CHAT_ID=123456789 \
              vpn-sentinel-vpn-sentinel-server:test
            sleep 10
            if docker ps | grep test-container; then
              echo "‚úÖ Server container is running"
              docker stop test-container
            else
              echo "‚ùå Server container crashed"
              exit 1
            fi
          else
            echo "‚úÖ Client Docker image built successfully"
          fi

  deployment-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
      - name: Test deployment configurations
        run: |
          echo "üöÄ Testing deployment configurations..."
          deployments=("server-only" "unified" "client-only")
          for deployment in "${deployments[@]}"; do
            echo "Testing $deployment deployment..."
            cd deployments/$deployment
            if [ -f "compose.yaml" ]; then
              docker-compose -f compose.yaml config > /dev/null
              echo "‚úÖ $deployment deployment configuration is valid"
            else
              echo "‚ùå $deployment deployment missing compose.yaml"
              exit 1
            fi
            cd ../..
          done
          echo "‚úÖ All deployment configurations tested successfully"
