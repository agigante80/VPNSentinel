---
name: VPN Sentinel CI/CD
permissions:
  actions: read
  contents: read
  security-events: write
on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
env:
  PYTHON_VERSION: '3.11'
jobs:
  syntax-check:
    name: Syntax & Style Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
      - name: Check Python syntax
        run: |
          python -m py_compile vpn-sentinel-server/vpn-sentinel-server.py
          echo "‚úÖ Python syntax check passed"
      - name: Check shell script syntax
        run: |
          bash -n vpn-sentinel-client/vpn-sentinel-client.sh
          echo "‚úÖ Shell script syntax check passed"
      - name: Python code style check
        run: |
          flake8 vpn-sentinel-server/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 vpn-sentinel-server/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Check Docker Compose files
        run: |
          docker compose -f compose.yaml config > /dev/null
          echo "‚úÖ Main compose.yaml syntax OK"
          for file in deployments/*/compose.yaml; do
            if [ -f "$file" ]; then
              docker compose -f "$file" config > /dev/null
              echo "‚úÖ $(basename $(dirname $file))/compose.yaml syntax OK"
            fi
          done
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: syntax-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then
            pip install -r tests/requirements.txt
          fi
      - name: Run unit tests
        run: |
          cd tests
          python -m pytest unit/ -v --tb=short --junitxml=unit-test-results.xml
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: tests/unit-test-results.xml
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
      - name: Create test environment file
        run: |
          cp tests/.env.test .env
      - name: Remove old Docker containers
        run: docker compose -f tests/docker-compose.test.yaml down -v
      - name: Remove dangling volumes
        run: docker volume prune -f
      - name: Build fresh containers
        run: docker compose -f tests/docker-compose.test.yaml build --no-cache
      - name: Build and start test environment
        run: |
          docker compose -f tests/docker-compose.test.yaml up -d --build
          timeout 60s bash -c 'while ! curl -s http://localhost:5000/test/v1/health > /dev/null; do sleep 2; done'
          echo "‚úÖ Test server is ready"
      - name: Run integration tests
        run: |
          cd tests
          export VPN_SENTINEL_URL=http://localhost:5000
          export VPN_SENTINEL_API_PATH=/test/v1
          export VPN_SENTINEL_API_KEY=test-api-key-abcdef123456789
          python -m pytest integration/ -v
      - name: Get server logs on failure
        if: failure()
        run: |
          echo "=== Server Logs ==="
          docker compose -f tests/docker-compose.test.yaml logs vpn-sentinel-server-test
          echo "=== Client Logs ==="
          docker compose -f tests/docker-compose.test.yaml logs vpn-sentinel-client-test
      - name: Stop test environment
        if: always()
        run: |
          docker compose -f tests/docker-compose.test.yaml down -v
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install coverage codecov
      - name: Run tests with coverage
        run: |
          cd tests
          coverage run --source="../vpn-sentinel-server" -m pytest unit/ --quiet
          coverage xml -o coverage.xml
          coverage report --show-missing
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: tests/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: syntax-check
    strategy:
      matrix:
        component: [vpn-sentinel-server, vpn-sentinel-client]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Build Docker image (use repo root as context)
        run: |
          # Build from repository root so Dockerfile can reference project-root paths
          docker build -t vpn-sentinel-${{ matrix.component }}:test -f ${{ matrix.component }}/Dockerfile .
      - name: Test server container startup
        if: matrix.component == 'vpn-sentinel-server'
        run: |
          echo "üß™ Testing server container startup..."
          docker run -d --name test-server \
            -e VPN_SENTINEL_API_KEY=test-key \
            -e VPN_SENTINEL_SERVER_API_PORT=5000 \
            -e VPN_SENTINEL_SERVER_DASHBOARD_PORT=8080 \
            -e VPN_SENTINEL_SERVER_DASHBOARD_ENABLED=false \
            -e TELEGRAM_BOT_TOKEN=test:token \
            -e TELEGRAM_CHAT_ID=123456789 \
            vpn-sentinel-${{ matrix.component }}:test
          
          # Wait for container to start
          sleep 10
          
          # Check if container is running
          if docker ps --filter "name=test-server" --filter "status=running" | grep test-server; then
            echo "‚úÖ Server container started successfully"
            docker stop test-server
            docker rm test-server
          else
            echo "‚ùå Server container failed to start"
            docker logs test-server
            docker rm test-server
            exit 1
          fi
      - name: Verify client image
        if: matrix.component == 'vpn-sentinel-client'
        run: |
          echo "‚úÖ Client Docker image built successfully"
          docker images vpn-sentinel-${{ matrix.component }}:test
  deployment-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-publish]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Test deployment configurations
        run: |
          echo "üöÄ Testing deployment configurations..."
          deployments=("server-central" "all-in-one" "client-with-vpn" "client-standalone")
          for deployment in "${deployments[@]}"; do
            echo "Testing $deployment deployment..."
            cd deployments/$deployment
            if [ -f "compose.yaml" ]; then
              docker compose -f compose.yaml config > /dev/null
              echo "‚úÖ $deployment deployment configuration is valid"
            else
              echo "‚ùå $deployment deployment missing compose.yaml"
              exit 1
            fi
            cd ../..
          done
          echo "‚úÖ All deployment configurations tested successfully"
  docker-publish:
    name: Docker Publish
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata for server
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: agigante80/vpn-sentinel-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=development,enable=${{ github.ref == 'refs/heads/develop' }}
      - name: Get commit hash
        id: commit-hash
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Get version
        id: version
        run: echo "version=$(./get_version.sh)" >> $GITHUB_OUTPUT
      - name: Extract metadata for client
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: agigante80/vpn-sentinel-client
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=development,enable=${{ github.ref == 'refs/heads/develop' }}
      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          # Use repository root as the build context so Dockerfile COPY paths
          # that reference files under the repo root resolve correctly.
          context: .
          file: vpn-sentinel-server/Dockerfile
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          # Use repository root as the build context so Dockerfile COPY paths
          # that reference files under the repo root resolve correctly.
          context: .
          file: vpn-sentinel-client/Dockerfile
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
