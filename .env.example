# =============================================================================
# VPN SENTINEL ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
#
# 📋 OVERVIEW:
# This file contains all environment variables needed to configure VPN Sentinel.
# Copy this file to .env and customize the values for your deployment.
#
# 🔧 SETUP INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Edit with your values: nano .env (or your preferred editor)
# 3. Validate: docker compose config (checks syntax)
# 4. Deploy: docker compose up -d
#
# ⚠️  SECURITY NOTES:
# - Generate strong API keys: openssl rand -hex 32
# - Use HTTPS in production with valid certificates
# - Restrict server ports to trusted networks only
# - Keep .env file out of version control (it's in .gitignore)
#
# 🔍 VALIDATION:
# Run 'docker compose config' to validate your .env file syntax
#
# =============================================================================

# =============================================================================
# 🔒 SECURITY & CERTIFICATES
# =============================================================================

# Trust self-signed certificates for HTTPS requests (true/false)
# ⚠️  WARNING: Only set to 'true' in development/testing environments!
# 🚫 NEVER use in production - use proper CA-signed certificates instead
# 📝 Purpose: Disables strict certificate verification for development
# 🔍 Default: false (recommended for security)
TRUST_SELF_SIGNED_CERTIFICATES=false

# =============================================================================
# 🛡️  VPN CLIENT CONFIGURATION
# =============================================================================
#
# 🎯 IMPORTANT: VPN Sentinel works with ANY Docker VPN client!
# The docker-compose.yaml uses generic "vpn-client" service name.
# Replace the Gluetun service with your preferred VPN solution.
#
# ✅ SUPPORTED VPN CLIENTS:
# • Gluetun (qmcgaw/gluetun) - 70+ providers (our working example)
# • OpenVPN (dperson/openvpn-client) - custom OpenVPN configs
# • WireGuard (linuxserver/wireguard) - modern WireGuard protocol
# • Transmission+VPN (haugene/transmission-openvpn) - torrent client
# • PIA WireGuard (thrnz/docker-wireguard-pia) - Private Internet Access
#
# 🔄 SETUP STEPS:
# 1. Choose your VPN client from examples below
# 2. Replace the "vpn-client" service in docker-compose.yaml
# 3. Uncomment and configure the corresponding environment variables
# 4. Test connectivity: docker compose up vpn-client
#
# 📚 GLUETUN EXAMPLE (70+ VPN providers supported):
# Full provider list: https://github.com/qdm12/gluetun/wiki

# VPN Service Provider (Gluetun-specific)
# 📝 Required for Gluetun - see https://github.com/qdm12/gluetun/wiki for full list
# 🔍 Examples: privatevpn, nordvpn, expressvpn, surfshark, cyberghost, pia, mullvad
# 💡 Popular choices: privatevpn (stable), nordvpn (fast), expressvpn (reliable)
VPN_SERVICE_PROVIDER=privatevpn

# VPN Account Credentials
# 📝 Your VPN provider username/email and password
# 🔒 Keep these secure - they're your VPN access credentials
# 💡 Some providers use email as username, others require specific format
VPN_USER=your_vpn_username_here
VPN_PASSWORD=your_vpn_password_here

# Preferred Server Countries (Gluetun-specific)
# 📝 Comma-separated list of countries for VPN server selection
# 🎯 Gluetun will automatically choose the best server in these countries
# 🔍 Examples: Switzerland,Netherlands,Sweden,Norway,Germany,United Kingdom
# 💡 Choose countries with good connectivity and privacy laws
SERVER_COUNTRIES=Switzerland,Netherlands

# VPN Update Check Interval (Gluetun-specific)
# 📝 How often Gluetun checks for VPN server updates
# ⏰ Format: <number><unit> (h=hours, m=minutes)
# 🔍 Default: 24h (recommended - balances freshness vs API load)
# 💡 Shorter intervals = more current servers but more API calls
UPDATER_PERIOD=24h

# =============================================================================
# 🔄 ALTERNATIVE VPN CLIENT CONFIGURATIONS
# =============================================================================
#
# Uncomment and modify ONE section below based on your chosen VPN client.
# Each section shows the required environment variables for that client.
#
# ⚠️  IMPORTANT: Also update docker-compose.yaml to use the correct image!

# -----------------------------------------------------------------------------
# 🐳 OPENVPN CLIENT (dperson/openvpn-client)
# Image: dperson/openvpn-client:latest
# Docs: https://github.com/dperson/openvpn-client
# -----------------------------------------------------------------------------
# OPENVPN_CONFIG_FILE=/path/to/your/config.ovpn
# OPENVPN_USERNAME=your_username
# OPENVPN_PASSWORD=your_password

# -----------------------------------------------------------------------------
# 🔗 WIREGUARD CLIENT (linuxserver/wireguard)
# Image: linuxserver/wireguard:latest
# Docs: https://github.com/linuxserver/docker-wireguard
# -----------------------------------------------------------------------------
# WG_PEERS=1
# WG_SERVERURL=your.domain.com
# WG_SERVERPORT=51820

# -----------------------------------------------------------------------------
# 📥 TRANSMISSION + VPN (haugene/transmission-openvpn)
# Image: haugene/transmission-openvpn:latest
# Docs: https://github.com/haugene/docker-transmission-openvpn
# -----------------------------------------------------------------------------
# OPENVPN_PROVIDER=NORDVPN
# OPENVPN_USERNAME=your_username
# OPENVPN_PASSWORD=your_password
# LOCAL_NETWORK=192.168.1.0/24

# -----------------------------------------------------------------------------
# 🔒 PIA WIREGUARD (thrnz/docker-wireguard-pia)
# Image: thrnz/docker-wireguard-pia:latest
# Docs: https://github.com/thrnz/docker-wireguard-pia
# -----------------------------------------------------------------------------
# PIA_USER=your_pia_username
# PIA_PASS=your_pia_password
# PIA_AUTOPORT=true

# -----------------------------------------------------------------------------
# 👤 USER & GROUP IDS (for file permissions)
# 📝 Required for some VPN clients to match host user permissions
# 🔍 Get your IDs with: id $(whoami)
# 💡 Only needed if VPN client requires specific UID/GID
# -----------------------------------------------------------------------------
# PUID_MEDIA=1000
# PGID_MEDIA=1000

# =============================================================================
# 🔑 VPN SENTINEL CORE CONFIGURATION
# =============================================================================
#
# These settings are used by both the VPN Sentinel client and server.
# They establish secure communication and basic system behavior.

# API Security Key (REQUIRED - generate a strong random key)
# 📝 Used for authentication between client and server
# 🔒 CRITICAL: Must be the same on client and server
# 🛠️  Generate with: openssl rand -hex 32
# 📏 Length: 64 hex characters (32 bytes)
# 🔍 Example: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456
# 💡 Store securely - this key protects your monitoring system
VPN_SENTINEL_API_KEY=your_secure_random_api_key_here

# TLS/SSL Certificate Paths (for HTTPS communication)
# 📝 Paths to certificate and private key files for secure API communication
# 🔒 Required for production deployments
# 🛠️  Generate self-signed: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
# 📁 Mount these files in docker-compose.yaml volumes section
# 💡 Use full paths: /etc/vpn-sentinel/vpn-sentinel-cert.pem
VPN_SENTINEL_TLS_CERT_PATH=/path/to/vpn-sentinel-cert.pem
VPN_SENTINEL_TLS_KEY_PATH=/path/to/vpn-sentinel-key.pem

# System Timezone (for accurate timestamps)
# 📝 Timezone for logs, notifications, and dashboard display
# 🕐 Format: IANA timezone database names
# 🔍 Examples: UTC, Europe/London, America/New_York, Asia/Tokyo, Australia/Sydney
# 💡 Use UTC for servers, local timezone for personal deployments
TZ=UTC

# =============================================================================
# 📡 VPN SENTINEL CLIENT CONFIGURATION
# =============================================================================
#
# Configuration for the VPN Sentinel monitoring client.
# The client runs inside the VPN network and reports status to the server.

# Server API Base URL (REQUIRED - where client sends reports)
# 📝 Full URL to the VPN Sentinel server API
# 🔍 Format: protocol://hostname:port
# 💡 Use Docker service name for same-compose deployments: http://vpn-sentinel-server:5000
# 🌐 Use external IP/domain for remote server: https://your-server.com:5000
# ⚠️  Must include protocol (http/https) and port number
VPN_SENTINEL_SERVER_API_BASE_URL=http://vpn-sentinel-server:5000

# API Path Prefix (for API versioning and organization)
# 📝 Prefix for all API endpoints
# 🔍 Default: /api/v1 (recommended for future compatibility)
# 💡 Allows API versioning: /api/v1, /api/v2, etc.
# 🔄 Don't change unless you modify server endpoints
VPN_SENTINEL_SERVER_API_PATH=/api/v1

# Client Identifier (unique name for this monitoring instance)
# 📝 Human-readable name for tracking and notifications
# 🎯 Used in logs, dashboard, and Telegram alerts
# 📏 Format: kebab-case (lowercase, dashes, no spaces)
# 🔍 Examples: "home-office-vpn", "server-room-monitor", "mobile-vpn-client"
# 💡 If empty, generates random 12-digit ID
# 🔄 Change if running multiple clients
VPN_SENTINEL_CLIENT_ID=vpn-monitor-main

# =============================================================================
# 🖥️  VPN SENTINEL SERVER CONFIGURATION
# =============================================================================
#
# Configuration for the VPN Sentinel monitoring server.
# The server receives client reports and provides the web dashboard.

# Server API Port (port for client-server communication)
# 📝 Port where server listens for client API requests
# 🔍 Default: 5000 (Flask default)
# 🌐 Must be accessible from VPN network for clients to connect
# 🔒 Firewall: Restrict to VPN network only in production
# 💡 Change if port 5000 conflicts with other services
VPN_SENTINEL_SERVER_API_PORT=5000

# Web Dashboard Port (port for web interface)
# 📝 Port where web dashboard is accessible
# 🔍 Default: 8080 (avoids conflicts with API port)
# 🌐 Access dashboard at: http://your-server:8080
# 🔒 Firewall: Restrict access to trusted networks
# 💡 Use reverse proxy (nginx/caddy) for SSL termination in production
VPN_SENTINEL_SERVER_DASHBOARD_PORT=8080

# =============================================================================
# 🛡️  SERVER SECURITY SETTINGS
# =============================================================================

# Rate Limiting (requests per minute per IP)
# 📝 Maximum API requests allowed per IP address per minute
# 🛡️  Protects against abuse and DoS attacks
# 🔍 Default: 30 (reasonable for monitoring traffic)
# 💡 Increase for high-frequency monitoring, decrease for security
# 📊 Monitor logs for rate limit hits and adjust accordingly
VPN_SENTINEL_SERVER_RATE_LIMIT_REQUESTS=30

# IP Whitelist (comma-separated CIDR blocks)
# 📝 Restrict server access to specific IP ranges
# 🛡️  Additional security layer for API and dashboard
# 🔍 Format: CIDR notation (192.168.1.0/24) or single IPs
# 💡 Examples: 192.168.1.0/24,10.0.0.0/8,172.16.0.0/12
# 🚫 Leave empty to allow all IPs (not recommended for production)
# 💡 Use VPN gateway IPs or trusted network ranges
VPN_SENTINEL_SERVER_ALLOWED_IPS=

# =============================================================================
# 📊 MONITORING & ALERTING CONFIGURATION
# =============================================================================

# Web Dashboard Enable/Disable
# 📝 Controls whether the web dashboard is available
# 🔍 Default: true (dashboard provides useful status overview)
# 💡 Set to false for headless deployments or API-only usage
# 🌐 Dashboard shows: client status table, last seen times, connection status
VPN_SENTINEL_SERVER_DASHBOARD_ENABLED=true

# Alert Threshold (minutes before sending offline alerts)
# 📝 Send notification if client hasn't reported for X minutes
# 🚨 Balance: Too short = false alarms, too long = delayed detection
# 🔍 Default: 15 minutes (good balance for most use cases)
# 💡 Adjust based on your monitoring requirements and network stability
# 📊 Formula: threshold > (check_interval * 2) + buffer
VPN_SENTINEL_SERVER_ALERT_THRESHOLD_MINUTES=15

# Check Interval (how often server checks client status)
# 📝 Minutes between server health checks
# ⏰ Determines monitoring frequency and alert responsiveness
# 🔍 Default: 5 minutes (reasonable for most deployments)
# 💡 Shorter = more responsive but higher server load
# 📊 Affects: Dashboard updates, alert timing, log frequency
VPN_SENTINEL_SERVER_CHECK_INTERVAL_MINUTES=5

# =============================================================================
# 📱 TELEGRAM BOT INTEGRATION (Highly Recommended)
# =============================================================================
#
# Telegram notifications provide instant alerts for VPN issues.
# Setup takes 2 minutes and provides critical monitoring capabilities.
#
# 🛠️  SETUP INSTRUCTIONS:
# 1. Message @BotFather on Telegram: https://t.me/botfather
# 2. Send command: /newbot
# 3. Follow prompts to create your bot and get the token
# 4. Message @userinfobot: https://t.me/userinfobot
# 5. Send any message to get your Chat ID
# 6. Save both values below
#
# 📝 REQUIRED VALUES:
# • TELEGRAM_BOT_TOKEN: From BotFather (format: 1234567890:ABCdefGhIjKlMnOpQrStUvWxYz)
# • TELEGRAM_CHAT_ID: From userinfobot (format: 123456789)
#
# 🔍 EXAMPLES:
# TELEGRAM_BOT_TOKEN=1234567890:ABCdefGhIjKlMnOpQrStUvWxYz
# TELEGRAM_CHAT_ID=123456789
#
# 💡 FEATURES:
# • Instant notifications when VPN goes down
# • Client status updates and recovery alerts
# • Customizable alert messages
# • Works worldwide, no port forwarding needed

TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_CHAT_ID=your_telegram_chat_id_here

# =============================================================================
# 🎯 QUICK START CHECKLIST
# =============================================================================
#
# Before deploying, verify these critical settings:
# ✅ VPN_SERVICE_PROVIDER - Valid provider name
# ✅ VPN_USER/VPN_PASSWORD - Your VPN credentials
# ✅ VPN_SENTINEL_API_KEY - Generated with: openssl rand -hex 32
# ✅ VPN_SENTINEL_SERVER_API_BASE_URL - Correct server URL
# ✅ TELEGRAM_BOT_TOKEN/CHAT_ID - For notifications (recommended)
#
# Test deployment:
# 1. docker compose config (validate syntax)
# 2. docker compose up -d (deploy)
# 3. docker compose logs -f (monitor startup)
# 4. Access dashboard: http://localhost:8080
#
# =============================================================================
