version: '3.8'

services:
  vpn-client:
    image: qmcgaw/gluetun
    container_name: vpn-client
    cap_add:
      - NET_ADMIN  
    devices:
      - /dev/net/tun:/dev/net/tun
    ports: []  
    volumes:
      - ./vpn-client:/gluetun  
    environment:
      # 🔧 GLUETUN-SPECIFIC CONFIGURATION (adapt for your VPN client):
      - UPDATER_PERIOD=${UPDATER_PERIOD:-24h}              # Gluetun: Update check interval
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}       # Gluetun: Provider name
      - SERVER_COUNTRIES=${SERVER_COUNTRIES}               # Gluetun: Preferred countries
      - OPENVPN_USER=${VPN_USER}                           # Gluetun: VPN username  
      - OPENVPN_PASSWORD=${VPN_PASSWORD}                   # Gluetun: VPN password
      # 🌐 NETWORK CONFIGURATION (keep this for VPN Sentinel):
      - FIREWALL_OUTBOUND_SUBNETS=172.28.0.0/16  # Allow VPN dockers communication
    networks:
      - vpn-sentinel-internal  # Internal network for VPN Sentinel monitoring
    restart: always

  vpn-sentinel-client:
    image: curlimages/curl:latest
    container_name: vpn-sentinel-client
    environment:
      - VPN_SENTINEL_SERVER_API_BASE_URL=${VPN_SENTINEL_SERVER_API_BASE_URL:-http://vpn-sentinel-server:5000}
      - VPN_SENTINEL_SERVER_API_PATH=${VPN_SENTINEL_SERVER_API_PATH:-/api/v1}
      - VPN_SENTINEL_CLIENT_ID=vpn-sentinel-client
      - VPN_SENTINEL_API_KEY=${VPN_SENTINEL_API_KEY}
      - TZ=${TZ:-UTC}
      - VPN_SENTINEL_TLS_CERT_PATH=${VPN_SENTINEL_TLS_CERT_PATH}
      - TRUST_SELF_SIGNED_CERTIFICATES=${TRUST_SELF_SIGNED_CERTIFICATES}
    volumes:
      - ./vpn-sentinel-client/vpn-sentinel-client.sh:/tmp/vpn-sentinel-client.sh:ro
      - ./certs/vpn-sentinel-cert.pem:/certs/vpn-sentinel-cert.pem:ro
      - ./certs/vpn-sentinel-key.pem:/certs/vpn-sentinel-key.pem:ro
    network_mode: service:vpn-client  # 🔄 CHANGE 'vpn-client' to YOUR VPN container name!
    command: 
      - sh
      - -c
      - |
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [client] 🚀 VPN Sentinel Client Starting..." &&
        sleep 30 &&
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [client] ⏳ Waiting for VPN connection to stabilize..." &&
        sleep 30 &&
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [config] 📁 Setting up monitoring script..." &&
        mkdir -p /home/curl_user &&
        cp /tmp/vpn-sentinel-client.sh /home/curl_user/vpn-sentinel-client.sh &&
        chmod +x /home/curl_user/vpn-sentinel-client.sh &&
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [client] 🔍 Starting continuous VPN monitoring..." &&
        exec /home/curl_user/vpn-sentinel-client.sh
    depends_on:
      - vpn-client               # 🔄 CHANGE 'vpn-client' to YOUR VPN container name!
      - vpn-sentinel-server      # Requires monitoring server for reporting
    restart: unless-stopped
    # Health check to ensure client monitoring is working properly
    healthcheck:
      test: >
        sh -c '
        # Check if monitoring script is running
        pgrep -f vpn-sentinel-client.sh > /dev/null || exit 1;
        # Check if we can get public IP (VPN is working)
        curl -s --max-time 10 https://ipinfo.io/ip > /dev/null || exit 1;
        # Check if we can reach monitoring server
        curl -s --max-time 5 ${VPN_SENTINEL_SERVER_API_BASE_URL}${VPN_SENTINEL_SERVER_API_PATH}/health > /dev/null || exit 1;
        echo "Client health check passed"
        '
      interval: 120s       # Check every 2 minutes (less frequent than server)
      timeout: 30s         # Allow time for network requests
      start_period: 90s    # Wait for VPN connection and initial setup
      retries: 3




  sentinel-client:
    image: curlimages/curl:latest
    container_name: sentinel-client
    environment:
      - VPN_SENTINEL_SERVER_API_BASE_URL=${VPN_SENTINEL_SERVER_API_BASE_URL:-http://vpn-sentinel-server:5000}
      - VPN_SENTINEL_SERVER_API_PATH=${VPN_SENTINEL_SERVER_API_PATH:-/api/v1}
      - VPN_SENTINEL_CLIENT_ID=sentinel-client
      - VPN_SENTINEL_API_KEY=${VPN_SENTINEL_API_KEY}
      - TZ=${TZ:-UTC}
      - VPN_SENTINEL_TLS_CERT_PATH=${VPN_SENTINEL_TLS_CERT_PATH}
      - TRUST_SELF_SIGNED_CERTIFICATES=${TRUST_SELF_SIGNED_CERTIFICATES}
    volumes:
      - ./vpn-sentinel-client/vpn-sentinel-client.sh:/tmp/vpn-sentinel-client.sh:ro
      - ./certs/vpn-sentinel-cert.pem:/certs/vpn-sentinel-cert.pem:ro
      - ./certs/vpn-sentinel-key.pem:/certs/vpn-sentinel-key.pem:ro
    networks:
      - client-net
    command: 
      - sh
      - -c
      - |
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [client] 🚀 VPN Sentinel Client Starting..." &&
        sleep 30 &&
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [client] ⏳ Waiting for VPN connection to stabilize..." &&
        sleep 30 &&
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [config] 📁 Setting up monitoring script..." &&
        mkdir -p /home/curl_user &&
        cp /tmp/vpn-sentinel-client.sh /home/curl_user/vpn-sentinel-client.sh &&
        chmod +x /home/curl_user/vpn-sentinel-client.sh &&
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [client] 🔍 Starting continuous VPN monitoring..." &&
        exec /home/curl_user/vpn-sentinel-client.sh
    depends_on:
      - vpn-sentinel-server      # Requires monitoring server for reporting
    restart: unless-stopped
    # Health check to ensure client monitoring is working properly
    healthcheck:
      test: >
        sh -c '
        # Check if monitoring script is running
        pgrep -f vpn-sentinel-client.sh > /dev/null || exit 1;
        # Check if we can get public IP (VPN is working)
        curl -s --max-time 10 https://ipinfo.io/ip > /dev/null || exit 1;
        # Check if we can reach monitoring server
        curl -s --max-time 5 ${VPN_SENTINEL_SERVER_API_BASE_URL}${VPN_SENTINEL_SERVER_API_PATH}/health > /dev/null || exit 1;
        echo "Client health check passed"
        '
      interval: 120s       # Check every 2 minutes (less frequent than server)
      timeout: 30s         # Allow time for network requests
      start_period: 90s    # Wait for VPN connection and initial setup
      retries: 3








  vpn-sentinel-server:
    image: python:3.11-alpine
    container_name: vpn-sentinel-server
    ports:
      - "${VPN_SENTINEL_SERVER_API_PORT:-5000}:${VPN_SENTINEL_SERVER_API_PORT:-5000}"      # External API access
      - "${VPN_SENTINEL_SERVER_DASHBOARD_PORT:-8080}:${VPN_SENTINEL_SERVER_DASHBOARD_PORT:-8080}" # Web Dashboard access
    environment:
      # Telegram Configuration (highly recommended)
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      
      # Server Port Configuration
      - VPN_SENTINEL_SERVER_API_PORT=${VPN_SENTINEL_SERVER_API_PORT:-5000}
      - VPN_SENTINEL_SERVER_DASHBOARD_PORT=${VPN_SENTINEL_SERVER_DASHBOARD_PORT:-8080}
      
      # Security & API Configuration  
      - VPN_SENTINEL_API_KEY=${VPN_SENTINEL_API_KEY}
      - VPN_SENTINEL_SERVER_API_PATH=${VPN_SENTINEL_SERVER_API_PATH:-/api/v1}
      - VPN_SENTINEL_SERVER_RATE_LIMIT_REQUESTS=${VPN_SENTINEL_SERVER_RATE_LIMIT_REQUESTS:-30}
      - VPN_SENTINEL_SERVER_ALLOWED_IPS=${VPN_SENTINEL_SERVER_ALLOWED_IPS:-}  # Comma-separated IP whitelist (optional)
      
      # Web Dashboard Configuration
      - VPN_SENTINEL_SERVER_DASHBOARD_ENABLED=${VPN_SENTINEL_SERVER_DASHBOARD_ENABLED:-true}
      
      # Server Monitoring Configuration
      - VPN_SENTINEL_SERVER_ALERT_THRESHOLD_MINUTES=${VPN_SENTINEL_SERVER_ALERT_THRESHOLD_MINUTES:-15}
      - VPN_SENTINEL_SERVER_CHECK_INTERVAL_MINUTES=${VPN_SENTINEL_SERVER_CHECK_INTERVAL_MINUTES:-5}
      
      # System Configuration
      - TZ=${TZ:-UTC}
      - VPN_SENTINEL_TLS_CERT_PATH=${VPN_SENTINEL_TLS_CERT_PATH}
      - VPN_SENTINEL_TLS_KEY_PATH=${VPN_SENTINEL_TLS_KEY_PATH}
      - TRUST_SELF_SIGNED_CERTIFICATES=${TRUST_SELF_SIGNED_CERTIFICATES}
    volumes:
        - ./vpn-sentinel-server/vpn-sentinel-server.py:/app/vpn-sentinel-server.py:ro
        - ./certs/vpn-sentinel-cert.pem:/certs/vpn-sentinel-cert.pem:ro
        - ./certs/vpn-sentinel-key.pem:/certs/vpn-sentinel-key.pem:ro
    working_dir: /app
    networks:
      - vpn-sentinel-server  # Server network (bypasses VPN for guaranteed access)
    command:
      - sh
      - -c
      - |
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [server] 📦 Installing VPN Sentinel Server dependencies..." &&
        pip install --no-cache-dir flask requests pytz &&
        echo "$$(date -u +'%Y-%m-%dT%H:%M:%SZ') INFO [server] 🚀 Starting VPN Sentinel Server..." &&
        python vpn-sentinel-server.py
    restart: unless-stopped
    # Health check to ensure server is responding (uses public health endpoint)
    healthcheck:
      test: >
        sh -c '
        # Check if server is responding to health endpoint
        wget --no-verbose --tries=1 --spider --timeout=5 "http://localhost:5000/api/v1/health" > /dev/null 2>&1 || exit 1;
        # Check if Python process is running
        pgrep -f vpn-sentinel-server.py > /dev/null || exit 1;
        echo "Server health check passed"
        '
      interval: 60s        # Check every minute
      timeout: 10s         # Allow time for HTTP request
      start_period: 30s    # Wait for server startup and dependencies
      retries: 3

networks:
  vpn-sentinel-internal:
    driver: bridge
    name: vpn-sentinel-internal
    ipam:
      config:
        - subnet: 172.28.0.0/16
    labels:
      - "vpn-sentinel.network.type=internal"
      - "vpn-sentinel.network.purpose=vpn-communication"
  
  vpn-sentinel-server:
    driver: bridge
    name: vpn-sentinel-server
    ipam:
      config:
        - subnet: 172.29.0.0/16
    labels:
      - "vpn-sentinel.network.type=server" 
      - "vpn-sentinel.network.purpose=telegram-notifications"

  client-net:
    driver: bridge
    name: client-net
    ipam:
      config:
        - subnet: 172.27.0.0/16

