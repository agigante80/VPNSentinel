# =============================================================================
# VPN SENTINEL SERVER-ONLY DEPLOYMENT
# =============================================================================
#
# DESCRIPTION:
#   Server-only deployment of VPN Sentinel monitoring system. This configuration
#   includes only the central monitoring server and database components, without
#   the VPN client or monitoring client. Use this when you want to run the server
#   separately from VPN monitoring clients.
#
# USE CASES:
#   - Centralized monitoring server for multiple VPN clients
#   - Remote monitoring server accessible via API/dashboard
#   - Development/testing of server components only
#   - Cloud deployment of monitoring infrastructure
#
# COMPONENTS INCLUDED:
#   ✅ VPN Sentinel Server (API, dashboard, notifications)
#   ✅ VPN Sentinel Database (persistent storage)
#   ❌ VPN Client (not included - external VPN clients connect to this server)
#   ❌ VPN Sentinel Client (not included - external monitoring clients send reports)
#
# NETWORKING:
#   - Server accessible on host ports 5000 (API) and 8080 (dashboard)
#   - No VPN network isolation (server runs on host network)
#   - External clients connect via HTTP/HTTPS to server endpoints
#
# CONFIGURATION:
#   - Copy .env.example to .env and configure server settings
#   - Set VPN_SENTINEL_API_KEY for client authentication
#   - Configure Telegram bot for notifications (recommended)
#   - Set up TLS certificates for HTTPS (production recommended)
#
# DEPLOYMENT:
#   docker compose -f deployments/server-only/compose.yaml up -d
#
# API ENDPOINTS:
#   - POST /api/v1/keepalive - Receive client status reports
#   - GET /api/v1/status - Get server and client status
#   - GET /api/v1/health - Health check endpoint
#   - GET /dashboard - Web dashboard (if enabled)
#
# =============================================================================

services:
  # =============================================================================
  # VPN SENTINEL SERVER - Central monitoring server and notification hub
  # =============================================================================
  vpn-sentinel-server:
    image: python:3.9-slim
    container_name: vpn-sentinel-server
    ports:
      - "5000:5000"  # API port
      - "8080:8080"  # Dashboard port
    environment:
      # Server settings
      - VPN_SENTINEL_SERVER_API_PORT=5000
      - VPN_SENTINEL_SERVER_DASHBOARD_PORT=8080
      - VPN_SENTINEL_API_KEY=${VPN_SENTINEL_API_KEY}
      - TZ=${TZ:-UTC}

      # Telegram notifications (recommended)
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}

      # TLS/SSL certificates (optional)
      - VPN_SENTINEL_TLS_CERT_PATH=${VPN_SENTINEL_TLS_CERT_PATH}
      - VPN_SENTINEL_TLS_KEY_PATH=${VPN_SENTINEL_TLS_KEY_PATH}

      # IP whitelisting (optional)
      - VPN_SENTINEL_SERVER_ALLOWED_IPS=${VPN_SENTINEL_SERVER_ALLOWED_IPS}

      # Rate limiting
      - VPN_SENTINEL_SERVER_RATE_LIMIT_REQUESTS=${VPN_SENTINEL_SERVER_RATE_LIMIT_REQUESTS:-30}

    volumes:
      - ../../vpn-sentinel-server:/app:ro
      # TLS certificates (optional)
      - ${VPN_SENTINEL_TLS_CERT_PATH:-../../certs/server.crt}:/certs/server.crt:ro
      - ${VPN_SENTINEL_TLS_KEY_PATH:-../../certs/server.key}:/certs/server.key:ro

    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # =============================================================================
  # VPN SENTINEL DATABASE - Persistent storage for monitoring data
  # =============================================================================
  vpn-sentinel-db:
    image: nouchka/sqlite3:latest
    container_name: vpn-sentinel-db
    environment:
      - SQLITE_DATABASE_PATH=/data/vpn_sentinel.db
    volumes:
      - ../../vpn-sentinel-db:/data
    restart: unless-stopped

networks:
  # Server network for external access
  vpn-sentinel-server:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16