# =============================================================================# =============================================================================

# VPN SENTINEL UNIFIED ENVIRONMENT CONFIGURATION# VPN SENTINEL CONFIGURATION

# =============================================================================# =============================================================================

## Copy this file to .env and configure your settings

# üìã OVERVIEW:# 

# Complete environment configuration for unified VPN Sentinel deployment.# cp .env.example .env

# This includes VPN client, monitoring client, and server components.# nano .env

##

# üîß SETUP INSTRUCTIONS:# =============================================================================

# 1. Copy this file: cp .env.example .env

# 2. Edit with your values: nano .env# =============================================================================

# 3. Deploy: docker compose -f deployments/unified/compose.yaml up -d# VPN CLIENT CONFIGURATION - EXAMPLE using Gluetun

## =============================================================================

# ‚ö†Ô∏è  SECURITY NOTES:# üîÑ IMPORTANT: These settings are for GLUETUN (our working example VPN client)

# - Generate strong API keys: openssl rand -hex 32# The docker-compose.yaml uses a generic "vpn-client" container name that works with ANY VPN solution!

# - Use HTTPS in production with valid certificates#

# - Keep .env file out of version control# ‚úÖ VPN Sentinel uses generic "vpn-client" naming - works with ANY Docker VPN client:

## - Gluetun (qmcgaw/gluetun) - 70+ providers (our working example)

# =============================================================================# - OpenVPN (dperson/openvpn-client) - custom configurations

# - WireGuard (linuxserver/wireguard) - modern protocol  

# =============================================================================# - Any other Docker VPN solution you prefer!

# üîí SECURITY & CERTIFICATES#

# =============================================================================# üéØ SETUP: Just replace the "vpn-client" service in docker-compose.yaml with your VPN container

# and adapt these environment variables. VPN Sentinel automatically works with any VPN client!

# Trust self-signed certificates for HTTPS requests (true/false)

# ‚ö†Ô∏è  WARNING: Only set to 'true' in development/testing environments!# üìù GLUETUN-SPECIFIC SETTINGS (change if using different VPN client):

TRUST_SELF_SIGNED_CERTIFICATES=false

# VPN Provider (only needed for Gluetun - see Gluetun wiki for supported providers)

# API Key for client authentication (required for security)# Examples: privatevpn, nordvpn, expressvpn, surfshark, cyberghost, pia

VPN_SENTINEL_API_KEY=your_secure_api_key_hereVPN_SERVICE_PROVIDER=privatevpn



# IP Whitelisting (optional)# VPN Account Credentials (adapt variable names for your VPN client)

VPN_SENTINEL_SERVER_ALLOWED_IPS=VPN_USER=your_vpn_username_here

VPN_PASSWORD=your_vpn_password_here

# Rate Limiting (optional)

VPN_SENTINEL_SERVER_RATE_LIMIT_REQUESTS=30# Preferred VPN Server Countries (only needed for Gluetun)

# Examples: Switzerland,Netherlands,Sweden,Norway,Germany

# =============================================================================SERVER_COUNTRIES=Switzerland,Netherlands

# üõ°Ô∏è  VPN CLIENT CONFIGURATION

# =============================================================================# VPN Update Check Interval (only needed for Gluetun)

UPDATER_PERIOD=24h

# VPN Service Provider (Gluetun-specific)

VPN_SERVICE_PROVIDER=privatevpn# =============================================================================

# üîÑ EXAMPLE CONFIGURATIONS for Different VPN Clients

# VPN Account Credentials# =============================================================================

VPN_USER=your_vpn_username_here# Uncomment and modify the section for your VPN client:

VPN_PASSWORD=your_vpn_password_here#

# # For OpenVPN Client (dperson/openvpn-client):

# Preferred Server Countries# OPENVPN_CONFIG_FILE=/path/to/your/config.ovpn

SERVER_COUNTRIES=Switzerland,Netherlands# OPENVPN_USERNAME=your_username

# OPENVPN_PASSWORD=your_password

# VPN Update Check Interval#

UPDATER_PERIOD=24h# # For WireGuard (linuxserver/wireguard):

# WG_PEERS=1

# =============================================================================# WG_SERVERURL=your.domain.com

# üîî TELEGRAM NOTIFICATIONS (Highly Recommended)# WG_SERVERPORT=51820

# =============================================================================# 

# # For Transmission+VPN (haugene/transmission-openvpn):

# Telegram Bot Token# OPENVPN_PROVIDER=NORDVPN

TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here# OPENVPN_USERNAME=your_username

# OPENVPN_PASSWORD=your_password

# Telegram Chat ID# LOCAL_NETWORK=192.168.1.0/24

TELEGRAM_CHAT_ID=your_telegram_chat_id_here#

# # For PIA WireGuard (thrnz/docker-wireguard-pia):

# =============================================================================# PIA_USER=your_pia_username

# üîê TLS/SSL CERTIFICATES (Production Recommended)# PIA_PASS=your_pia_password

# =============================================================================# PIA_AUTOPORT=true

# 

# TLS Certificate Path (optional)# User and Group IDs (for file permissions)

VPN_SENTINEL_TLS_CERT_PATH=# Get your IDs with: id $(whoami)

# PUID_MEDIA=1000

# TLS Private Key Path (optional)# PGID_MEDIA=1000

VPN_SENTINEL_TLS_KEY_PATH=



# =============================================================================

# üñ•Ô∏è  SERVER CONFIGURATION# =============================================================================

# =============================================================================# VPN SENTINEL COMMON CONFIGURATION (Used by both Client and Server)

# =============================================================================

# Client ID for this monitoring instance

VPN_SENTINEL_CLIENT_ID=vpn-monitor-main# API Security Key (generate a secure random key) - REQUIRED for both client and server

# Generate with: openssl rand -hex 32

# API Server Port# Example: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456

VPN_SENTINEL_SERVER_API_PORT=5000VPN_SENTINEL_API_KEY=your_secure_random_api_key_here

# TLS/SSL Certificate and Key for HTTPS (self-signed or CA)

# Dashboard Port# Specify the paths to your certificate and key files for secure communication.

VPN_SENTINEL_SERVER_DASHBOARD_PORT=8080# Example: /etc/vpn-sentinel/vpn-sentinel-cert.pem

# Example: /etc/vpn-sentinel/vpn-sentinel-key.pem

# =============================================================================VPN_SENTINEL_TLS_CERT_PATH=/path/to/vpn-sentinel-cert.pem

# üïí SYSTEM CONFIGURATIONVPN_SENTINEL_TLS_KEY_PATH=/path/to/vpn-sentinel-key.pem

# =============================================================================

# Timezone (for accurate timestamps in logs and notifications)

# Timezone# Examples: UTC, Europe/London, America/New_York, Asia/Tokyo

TZ=UTCTZ=UTC

# =============================================================================
# VPN SENTINEL CLIENT CONFIGURATION (vpn-sentinel-client container)
# =============================================================================

# Server API Base URL (where the client sends status reports)
# Use internal Docker network name for containers in same compose file
# Use external IP/domain for remote server deployments
# MUST include protocol (http/https) and port number
VPN_SENTINEL_SERVER_API_BASE_URL=http://vpn-sentinel-server:5000

# API Path prefix for all endpoints (allows for versioning and better organization)
# Default: /api/v1 (recommended for future API versioning)
VPN_SENTINEL_SERVER_API_PATH=/api/v1

# Unique Client Identifier (change if running multiple instances)
# Used for internal tracking, logging, and display in Telegram notifications
# MUST be kebab-case format (lowercase with dashes, no spaces)
# If empty, client will generate a random 12-digit identifier
# Examples: "home-office-vpn", "server-room-monitor", "mobile-vpn-client"
VPN_SENTINEL_CLIENT_ID=vpn-monitor-main

# =============================================================================
# VPN SENTINEL SERVER CONFIGURATION (vpn-sentinel-server container)
# =============================================================================

# External Port for VPN Sentinel API (default: 5000)
# This port must be accessible from the internet for clients to connect
VPN_SENTINEL_SERVER_API_PORT=5000

# Web Dashboard Port (for web interface access)
VPN_SENTINEL_SERVER_DASHBOARD_PORT=8080

# Server Security Settings
# Rate limiting prevents abuse by limiting requests per IP address per minute
VPN_SENTINEL_SERVER_RATE_LIMIT_REQUESTS=30

# IP Whitelist (comma-separated, leave empty to allow all IPs)
# Example: 192.168.1.0/24,10.0.0.0/8,172.16.0.0/12
VPN_SENTINEL_SERVER_ALLOWED_IPS=

# Web Dashboard Configuration
# Enable/disable the web dashboard showing client status in a table format
VPN_SENTINEL_SERVER_DASHBOARD_ENABLED=true

# Monitoring Configuration (how the server monitors client health)
# Alert threshold: Send notification if client offline for X minutes
VPN_SENTINEL_SERVER_ALERT_THRESHOLD_MINUTES=15

# Check interval: How often server checks client status (minutes)
VPN_SENTINEL_SERVER_CHECK_INTERVAL_MINUTES=5

# Telegram Bot Integration (highly recommended for notifications)
# 
# Setup Instructions:
# 1. Message @BotFather on Telegram
# 2. Send: /newbot
# 3. Follow prompts and save the bot token below
# 4. Message @userinfobot to get your chat ID
# 5. Save your chat ID below
#
# Example token: 1234567890:ABCdefGhIjKlMnOpQrStUvWxYz
# Example chat ID: 123456789
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_CHAT_ID=your_telegram_chat_id_here
